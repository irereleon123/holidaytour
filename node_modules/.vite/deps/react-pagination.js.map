{
  "version": 3,
  "sources": ["../../react-pagination/src/pagination.js"],
  "sourcesContent": ["import React from 'react';\n\n/**\n * Returns an array with the range of pages to be displayed according to the params passed\n * @param {Number} selected The selected page number\n * @param {Number} numPages The total number of pages\n * @param {Number} num      The number of pages to display\n * @return {Array<Number>}\n */\nfunction pageRange(selected, numPages, num) {\n  let selectedPos = Math.ceil(num / 2);\n  let start = (selected < selectedPos) ? 1\n    : selected - selectedPos + 1;\n  let len = (numPages < start + num - 1) ? numPages - start + 1\n    : num;\n\n  return Array\n    .apply(null, Array(len))\n    .map((u, i) => start + i);\n}\n\nlet PaginationItem = React.createClass({\n  render() {\n    return (\n      <li className={'pagination__page' + (this.props.className ? ' pagination__page--' + this.props.className : '')}\n        onClick={() => this.props.onPageChange(this.props.page)} dangerouslySetInnerHTML={{__html: this.props.display + ''}} />\n    );\n  }\n});\n\nlet Pagination = React.createClass({\n  propTypes: {\n    onPageChange:   React.PropTypes.func.isRequired,\n    total:          React.PropTypes.number.isRequired,\n    initialPage:    React.PropTypes.number,\n    pagesToDisplay: React.PropTypes.number,\n    firstPageText:  React.PropTypes.string,\n    prevPageText:   React.PropTypes.string,\n    nextPageText:   React.PropTypes.string,\n    lastPageText:   React.PropTypes.string,\n    showFirstLast:  React.PropTypes.bool,\n    showPrevNext:   React.PropTypes.bool\n  },\n\n  getDefaultProps() {\n    return {\n      initialPage: 1,\n      pagesToDisplay: 5,\n      firstPageText: 'First page',\n      prevPageText: 'Previous page',\n      nextPageText: 'Next page',\n      lastPageText: 'Last page',\n      showFirstLast: true,\n      showPrevNext: true\n    };\n  },\n\n  getInitialState() {\n    return {\n      page: this.props.initialPage\n    };\n  },\n\n  onPageChange(page) {\n    this.setState({page: page});\n    this.props.onPageChange(page);\n  },\n\n  render() {\n    let self = this;\n    let currentPage = this.state.page;\n\n    let paginationItem = function (className, page, text) {\n      return (\n        <PaginationItem className={className}\n          onPageChange={self.onPageChange}\n          page={page}\n          display={text}\n          key={text} />\n      );\n    };\n\n    let pages = pageRange(currentPage, this.props.total, this.props.pagesToDisplay)\n      .map(function (p) {\n        let isCurrentPage = currentPage === p;\n        return paginationItem(isCurrentPage ? 'selected' : '', p, p);\n      });\n\n    let firstPage = this.props.showFirstLast && currentPage !== 1 ?\n      paginationItem('first', 1, this.props.firstPageText) : null;\n\n    let prevPage = this.props.showPrevNext && currentPage > 1 ?\n      paginationItem('prev', currentPage - 1, this.props.prevPageText) : null;\n\n    let nextPage = this.props.showPrevNext && currentPage !== this.props.total ?\n      paginationItem('next', currentPage + 1, this.props.nextPageText) : null;\n\n    let lastPage = this.props.showFirstLast && currentPage !== this.props.total ?\n      paginationItem('last', this.props.total, this.props.lastPageText) : null;\n\n    return (\n      <ul className='pagination'>\n        {firstPage}\n        {prevPage}\n        {pages}\n        {nextPage}\n        {lastPage}\n      </ul>\n    );\n  }\n});\n\nexport {pageRange, Pagination};\n"],
  "mappings": "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",
  "names": ["React"]
}
