import {
  require_react
} from "./chunk-AXJ2GJWQ.js";
import {
  __toESM
} from "./chunk-TCQZMY3T.js";

// node_modules/react-pagination/src/pagination.js
var import_react = __toESM(require_react());
function pageRange(selected, numPages, num) {
  let selectedPos = Math.ceil(num / 2);
  let start = selected < selectedPos ? 1 : selected - selectedPos + 1;
  let len = numPages < start + num - 1 ? numPages - start + 1 : num;
  return Array.apply(null, Array(len)).map((u, i) => start + i);
}
var PaginationItem = import_react.default.createClass({
  render() {
    return import_react.default.createElement(
      "li",
      {
        className: "pagination__page" + (this.props.className ? " pagination__page--" + this.props.className : ""),
        onClick: () => this.props.onPageChange(this.props.page),
        dangerouslySetInnerHTML: { __html: this.props.display + "" }
      }
    );
  }
});
var Pagination = import_react.default.createClass({
  propTypes: {
    onPageChange: import_react.default.PropTypes.func.isRequired,
    total: import_react.default.PropTypes.number.isRequired,
    initialPage: import_react.default.PropTypes.number,
    pagesToDisplay: import_react.default.PropTypes.number,
    firstPageText: import_react.default.PropTypes.string,
    prevPageText: import_react.default.PropTypes.string,
    nextPageText: import_react.default.PropTypes.string,
    lastPageText: import_react.default.PropTypes.string,
    showFirstLast: import_react.default.PropTypes.bool,
    showPrevNext: import_react.default.PropTypes.bool
  },
  getDefaultProps() {
    return {
      initialPage: 1,
      pagesToDisplay: 5,
      firstPageText: "First page",
      prevPageText: "Previous page",
      nextPageText: "Next page",
      lastPageText: "Last page",
      showFirstLast: true,
      showPrevNext: true
    };
  },
  getInitialState() {
    return {
      page: this.props.initialPage
    };
  },
  onPageChange(page) {
    this.setState({ page });
    this.props.onPageChange(page);
  },
  render() {
    let self = this;
    let currentPage = this.state.page;
    let paginationItem = function(className, page, text) {
      return import_react.default.createElement(
        PaginationItem,
        {
          className,
          onPageChange: self.onPageChange,
          page,
          display: text,
          key: text
        }
      );
    };
    let pages = pageRange(currentPage, this.props.total, this.props.pagesToDisplay).map(function(p) {
      let isCurrentPage = currentPage === p;
      return paginationItem(isCurrentPage ? "selected" : "", p, p);
    });
    let firstPage = this.props.showFirstLast && currentPage !== 1 ? paginationItem("first", 1, this.props.firstPageText) : null;
    let prevPage = this.props.showPrevNext && currentPage > 1 ? paginationItem("prev", currentPage - 1, this.props.prevPageText) : null;
    let nextPage = this.props.showPrevNext && currentPage !== this.props.total ? paginationItem("next", currentPage + 1, this.props.nextPageText) : null;
    let lastPage = this.props.showFirstLast && currentPage !== this.props.total ? paginationItem("last", this.props.total, this.props.lastPageText) : null;
    return import_react.default.createElement("ul", { className: "pagination" }, firstPage, prevPage, pages, nextPage, lastPage);
  }
});
export {
  Pagination,
  pageRange
};
//# sourceMappingURL=react-pagination.js.map
